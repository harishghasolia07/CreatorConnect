#!/bin/bash

echo "‚ö° CreatorConnect Performance Testing"
echo "===================================="
echo ""

# Test data for comparison
BRIEF_DATA='{
  "title": "Wedding Photography in Goa",
  "description": "Looking for an experienced wedding photographer to capture our beach wedding in Goa. We want candid, natural shots with a romantic feel.",
  "location": {"city": "Goa", "country": "India"},
  "category": "Photography",
  "preferredStyles": ["romantic", "candid", "natural"],
  "budgetMax": 75000,
  "startDate": "2025-03-15",
  "endDate": "2025-03-17",
  "clientName": "Test Client",
  "clientEmail": "test@example.com"
}'

echo "üß™ Test 1: Performance Measurement"
echo "================================"
echo "üì§ Submitting brief and measuring response time..."

# Measure response time
START_TIME=$(date +%s.%N)
RESPONSE=$(curl -s -X POST http://localhost:3000/api/briefs \
  -H "Content-Type: application/json" \
  -d "$BRIEF_DATA")
END_TIME=$(date +%s.%N)

# Calculate duration
DURATION=$(echo "$END_TIME - $START_TIME" | bc)

echo "‚è±Ô∏è  Response Time: ${DURATION} seconds"
echo ""

echo "üìä Response Analysis:"
echo "==================="

# Check if response is valid JSON
if echo "$RESPONSE" | jq . >/dev/null 2>&1; then
    # Extract key metrics
    AI_ENABLED=$(echo "$RESPONSE" | jq -r '.aiEnabled // false')
    ENHANCED_COUNT=$(echo "$RESPONSE" | jq -r '.enhancedMatches | length // 0')
    TRADITIONAL_COUNT=$(echo "$RESPONSE" | jq -r '.traditionalMatches | length // 0')
    
    echo "‚úÖ AI Enabled: $AI_ENABLED"
    echo "üìà Enhanced Matches: $ENHANCED_COUNT"
    echo "üìä Traditional Matches: $TRADITIONAL_COUNT"
    
    if [ "$AI_ENABLED" = "true" ]; then
        echo ""
        echo "üéØ Sample Enhanced Match Analysis:"
        echo "================================"
        
        # Get first match details
        FIRST_MATCH=$(echo "$RESPONSE" | jq -r '.enhancedMatches[0]')
        TOTAL_SCORE=$(echo "$FIRST_MATCH" | jq -r '.score // 0')
        RULE_SCORE=$(echo "$FIRST_MATCH" | jq -r '.ruleBasedScore // 0')
        AI_SCORE=$(echo "$FIRST_MATCH" | jq -r '.semanticScore // 0')
        CREATOR_NAME=$(echo "$FIRST_MATCH" | jq -r '.creator.name // "Unknown"')
        
        echo "üë§ Creator: $CREATOR_NAME"
        echo "üèÜ Total Score: $TOTAL_SCORE"
        echo "üìè Rule-based Score: $RULE_SCORE"
        echo "ü§ñ AI Semantic Score: $AI_SCORE"
        echo "üí° Enhancement: +$(echo "$AI_SCORE" | bc) points from AI"
        
        # Show explanation preview
        echo ""
        echo "üîç AI Explanation Preview:"
        echo "$FIRST_MATCH" | jq -r '.explanation // "No explanation"' | head -c 100
        echo "..."
    else
        echo "‚ö†Ô∏è  AI features not enabled (check Gemini API key)"
    fi
else
    echo "‚ùå Invalid JSON response or error occurred"
    echo "Response: $RESPONSE"
fi

echo ""
echo "üìà Performance Comparison:"
echo "========================"

if (( $(echo "$DURATION > 5.0" | bc -l) )); then
    echo "üêå SLOW (>5s): Response time indicates performance bottleneck"
    echo "   Likely causes:"
    echo "   ‚Ä¢ Sequential API calls to Gemini"
    echo "   ‚Ä¢ Missing creator embeddings (generating on-demand)"
    echo "   ‚Ä¢ Network latency to AI API"
elif (( $(echo "$DURATION > 2.0" | bc -l) )); then
    echo "‚ö†Ô∏è  MODERATE (2-5s): Acceptable for AI-enhanced matching"
    echo "   ‚Ä¢ AI processing adds computational overhead"
    echo "   ‚Ä¢ Consider caching embeddings for better performance"
else
    echo "‚ö° FAST (<2s): Excellent performance!"
    echo "   ‚Ä¢ Likely using cached embeddings"
    echo "   ‚Ä¢ Optimized AI processing pipeline"
fi

echo ""
echo "üîß Optimization Recommendations:"
echo "==============================="
echo "1. üèÉ‚Äç‚ôÇÔ∏è Pre-compute creator embeddings during seeding"
echo "2. ‚ö° Batch AI API calls instead of sequential"
echo "3. üóÉÔ∏è  Cache semantic scores for popular brief types"
echo "4. üéØ Limit AI processing to top rule-based matches"
echo "5. ‚è∞ Add timeout handling for AI API calls"

echo ""
echo "üÜö Key Differences from Previous Method:"
echo "======================================="
echo ""
echo "üìä BEFORE (Rule-based only):"
echo "  ‚Ä¢ ‚ö° Fast: ~0.5-1s response time"
echo "  ‚Ä¢ üìè Simple scoring: 0-20 points"
echo "  ‚Ä¢ üî¢ Basic explanations: Bullet points"
echo "  ‚Ä¢ üéØ Logic: Location + Category + Budget + Skills match"
echo ""
echo "ü§ñ NOW (AI-Enhanced):"
echo "  ‚Ä¢ üêå Slower: ~2-8s response time"
echo "  ‚Ä¢ üìà Rich scoring: 0-30 points (20 rules + 10 AI)"
echo "  ‚Ä¢ üí¨ Smart explanations: Natural language from Gemini"
echo "  ‚Ä¢ üß† Logic: Rules + Semantic understanding + Context"
echo ""
echo "üí° The slowdown is EXPECTED and VALUABLE because:"
echo "  ‚úÖ AI understands project context better"
echo "  ‚úÖ Finds creators with subtle skill matches"
echo "  ‚úÖ Provides intelligent explanations"
echo "  ‚úÖ Learns from feedback for future improvements"
